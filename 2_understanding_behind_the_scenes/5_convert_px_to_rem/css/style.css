*,
*::after, /*we also want after and before sudo elements*/
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; /* better practice is to force inherit on all objects and then put the border box on the body. This will help in a situation where we need to use a plugin that usses other property, and until then it will still work fine by inheriting the border box via cascade */
}

html {
  font-size: 10px; /* ! we set root to 10px from default 16px to make it easier to deduce the final size on our rem units */
  font-size: 5px; /* When we change the root size now, whole page will change
  This makes easier for us to make the layout smaller for example when we want to add a media querie. We can just change the root and rest will follow
  */
  /* Using px in root, as above is a bad practice. Some people will set their browser to have larger size by default. And we will block it by this*/

  /* This is why we want to set default font size to 62.5% as it will equal to 10px in root for default browser, but still allow to change the settings for some users*/
  font-size: 62.5%;
}

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; /* to rem */
  box-sizing: border-box;
}

.header {
  position: relative;
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.8)
    ),
    url('../img/hero.jpg');
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
  position: absolute;
  top: 4rem; /* to rem */
  left: 4rem; /* to rem */
}

.logo {
  height: 3.5rem;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 6rem;
}

.heading-primary-main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
}

.heading-primary-sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.btn:link,
.btn:visited {
  font-size: 1.6rem;
  position: relative;
  display: inline-block;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  border-radius: 10rem;
  transition: all 0.2s;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 0.5rem rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

.btn::after {
  content: '';
  position: absolute;
  display: inline-block;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 10rem;
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scale(1.4, 1.8);
  opacity: 0;
}

.btn-animated {
  animation: moveInBottom 1s ease-out 0.75s;
  animation-fill-mode: backwards;
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  80% {
    transform: translateY(-1rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
